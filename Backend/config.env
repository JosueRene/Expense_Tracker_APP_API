MONGO_URL="mongodb://127.0.0.1:27017/ExpenseTracker"
PRIVATEKEY = My PRIVATEKEY


adminMiddleware.js:
const User = require('../models/signup-model')

const adminAuth = async (req, res, next) => {
    try {
        const user = await User.findById(req.userId);
        if (user.role !== 'admin') {
            return res.status(403).json({ message: "Access denied. Admin only." });
        }
        next();
    } catch (error) {
        return res.status(500).json({ message: "Internal Server Error" });
    }
};

module.exports = adminAuth



admin-router.js:
const router = require('express').Router();
const { User } = require('../models/signup-model');
const Expense = require('../models/expense-model');
const authenticationToken = require('../Middlewares/AuthMiddleware');
const adminAuth = require('../Middlewares/adminMiddleware');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');

// Rate limiter for admin login
const adminLoginLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 5, // 5 attempts
    message: "Too many login attempts. Please try again later."
});

// Admin signup (should be used only once or with special access)
router.post('/admin/signup', async (req, res) => {
    try {
        const { username, email, password } = req.body;

        // Check if admin already exists
        const adminExists = await User.findOne({ role: 'admin' });
        if (adminExists) {
            return res.status(400).json({ message: "Admin already exists!" });
        }

        const saltpassword = await bcrypt.genSalt(10);
        const hashpassword = await bcrypt.hash(password, saltpassword);

        await new User({
            username,
            email,
            password: hashpassword,
            role: 'admin'
        }).save();

        return res.status(200).json({ message: "Admin registered successfully!" });
    } catch (error) {
        return res.status(500).json({ message: "Internal Server Error: " + error.message });
    }
});

// Admin login
router.post('/admin/login', adminLoginLimiter, async (req, res) => {
    try {
        const { email, password } = req.body;

        // Find admin user
        const admin = await User.findOne({ email, role: 'admin' });
        if (!admin) {
            return res.status(401).json({ message: "Invalid admin credentials!" });
        }

        // Verify password
        const validPassword = await bcrypt.compare(password, admin.password);
        if (!validPassword) {
            return res.status(401).json({ message: "Invalid admin credentials!" });
        }

        // Generate admin token with role
        const token = jwt.sign(
            { _id: admin._id, role: admin.role },
            process.env.PRIVATEKEY,
            { expiresIn: "1d" }
        );

        // Set HTTP-only Cookie
        res.cookie('AdminAuthToken', token, {
            httpOnly: true,
            secure: true,
            sameSite: 'strict',
            maxAge: 24 * 60 * 60 * 1000 // 24 hours
        });

        res.status(200).json({
            message: "Admin logged in successfully!",
            redirectUrl: "/expense-tracker/admin/dashboard"
        });

    } catch (error) {
        return res.status(500).json({ message: "Internal Server Error: " + error.message });
    }
});

// Admin logout
router.post('/admin/logout', authenticationToken, adminAuth, async (req, res) => {
    try {
        const token = req.cookies.AdminAuthToken;
        if (!token) {
            return res.status(400).json({ message: "No admin token found!" });
        }

        // Clear the admin cookie
        res.clearCookie('AdminAuthToken');
        
        // You might want to add the token to RevokedToken list as well
        const decodedToken = jwt.verify(token, process.env.PRIVATEKEY);
        const expiresAt = new Date(decodedToken.exp * 1000);
        
        await new RevokedToken({ token, expiresAt }).save();
        
        return res.status(200).json({ message: "Admin logged out successfully!" });
    } catch (error) {
        return res.status(500).json({ message: "Error during logout: " + error.message });
    }
});

// Get all users
router.get('/admin/users', authenticationToken, adminAuth, async (req, res) => {
    try {
        const users = await User.find({ role: 'user' })
            .select('-password')
            .sort({ createdAt: -1 });
        res.status(200).json(users);
    } catch (error) {
        res.status(500).json({ message: "Error fetching users: " + error.message });
    }
});

// Get specific user details with their expenses
router.get('/admin/users/:userId', authenticationToken, adminAuth, async (req, res) => {
    try {
        const user = await User.findById(req.params.userId).select('-password');
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        const expenses = await Expense.find({ userId: req.params.userId })
            .sort({ createdAt: -1 });

        res.status(200).json({
            user,
            expenses
        });
    } catch (error) {
        res.status(500).json({ message: "Error fetching user details: " + error.message });
    }
});

// Get overall expense statistics
router.get('/admin/statistics', authenticationToken, adminAuth, async (req, res) => {
    try {
        const totalUsers = await User.countDocuments({ role: 'user' });
        const totalExpenses = await Expense.countDocuments();
        const totalAmount = await Expense.aggregate([
            {
                $group: {
                    _id: null,
                    total: { $sum: "$amount" }
                }
            }
        ]);

        // Get expenses by category
        const expensesByCategory = await Expense.aggregate([
            {
                $group: {
                    _id: "$category",
                    total: { $sum: "$amount" },
                    count: { $sum: 1 }
                }
            }
        ]);

        res.status(200).json({
            totalUsers,
            totalExpenses,
            totalAmount: totalAmount[0]?.total || 0,
            expensesByCategory
        });
    } catch (error) {
        res.status(500).json({ message: "Error fetching statistics: " + error.message });
    }
});

module.exports = router;